{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wasmpedia","text":"<p>An Open Source encyclopedia for WebAssembly (Wasm).</p> <p>This project is very early WIP.</p>"},{"location":"#what-is-wasm","title":"What is Wasm?","text":"<p>WebAssembly, or \"wasm\", is a general-purpose virtual ISA designed to be a compilation target for a wide variety of programming languages. Wasm was originally designed for the web, but is being used in many places outside of it. The features it needed to succeed in the web make it portable, secure, and fast which is something we need in all kinds of applications. </p>"},{"location":"#what-content-goes-here","title":"What content goes here?","text":"<p>In the future, we may add content about the ecosystem and specific runtimes / tools, but for now we will stick to wasm concepts and proposals.</p>"},{"location":"component/","title":"Component","text":"<p>TODO</p>"},{"location":"general/guest/","title":"Guest","text":"<p>Guests are things that compile to and run as Wasm Modules or Components.</p> <p>You run a Guest on and using a Host.</p>"},{"location":"general/host/","title":"Host","text":"<p>A host is something that can run Guest Modules and Components.</p> <p>Most hosts use software called \"runtimes\" that may internally</p> <ul> <li>Ahead-of-time (AOT) compile to the native format</li> <li>Act as an interpreter of Wasm instructions</li> <li>Perform Just-in-time (JIT) compilation</li> </ul> <p>Some host runtimes use a combination of these approaches.</p>"},{"location":"general/index-space/","title":"Index Spaces","text":"<p>Wasm refers to various items by their \"index\".</p> <p>Each type of item in a given scope has an index space which maps unsigned integers to items of that type. Whenever a new item of a given type is defined in a scope it is assigned the index one larger than the last item of that type.</p> <p>In other words, items are referred to using zero-indexed numbers which correspond to the order the items are imported or defined.</p>"},{"location":"general/index-space/#component-item-index-spaces","title":"Component Item Index Spaces","text":""},{"location":"general/index-space/#module-item-index-spaces","title":"Module Item Index Spaces","text":"<p>Some index spaces exist at the [Module] scope.</p>"},{"location":"general/index-space/#function-index-spaces","title":"Function Index Spaces","text":""},{"location":"general/kebab-names/","title":"Kebab Names","text":""},{"location":"general/lifting-lowering/","title":"Lifting &amp; Lowering","text":""},{"location":"general/lifting-lowering/#lifting","title":"Lifting","text":"<p>Lifting describes how to take a low-level thing and convert it into a higher-level thing.</p> From To Module function exports Component function exports [Module values] [Component values]"},{"location":"general/lifting-lowering/#lowering","title":"Lowering","text":"<p>Lowering describes how to take a high-level thing and convert it into a lower-level thing.</p> From To Component function imports Module function exports [Component values] [Module values]"},{"location":"general/parametric-linking/","title":"Parametric Linking","text":""},{"location":"general/robust-composition/","title":"Robust Composition","text":""},{"location":"general/shared-nothing/","title":"Shared Nothing","text":"<p>Programs have many ways of communicating with each other whether they are on the same computer or connected through a network.</p> <p>One of the main distinctions between ways programs communicate is whether they share memory.</p>"},{"location":"module/","title":"Module","text":"<p>Modules consist of a header followed by a sequence of sections. There are sections describing the Module's interactions with other modules (Imports and Exports), sections declaring data and other implements used by the module, and sections defining functions.</p>"},{"location":"module/#items","title":"Items","text":"<ul> <li>Function</li> <li>Table</li> <li>Memory</li> <li>Global</li> <li>Data</li> </ul>"},{"location":"module/data/","title":"Data (Module)","text":"<p>Modules may define byte data that's stored inside of them.</p> <p>Data has two types:</p> <ul> <li>Active - which is loaded into linear memory at initialization time.</li> <li>Passive - which is loaded into memory when requested.</li> </ul> <p>Each module can define data in data \"segments\" within the data section.</p>"},{"location":"module/export/","title":"Export (Module)","text":"<p>An export represents some resource that a Module provides when instantiated. </p> Field Name Type Description <code>name</code> identifier field name <code>kind</code> external kind the kind of export <code>index</code> index an index into an index space <p>Functionally, exports take an item in the index space and make it externally-available.</p>"},{"location":"module/export/#export-types","title":"Export Types","text":"<p>It's possible to export all of the same types that can be imported.</p> <ul> <li>Function</li> <li>Table</li> <li>Memory</li> <li>Global</li> </ul>"},{"location":"module/function/","title":"Function (Module)","text":"<p>Functions are units of Wasm code within a Module that have a type signature and a body made up of Wasm instructions.</p> <p>For example</p>"},{"location":"module/global/","title":"Global (Module)","text":"<p>TODO</p>"},{"location":"module/import/","title":"Import (Module)","text":"<p>An import represents some resource that a Module needs to be supplied in order to work.</p> Field Name Type Description <code>module_name</code> identifier the name of the module to import from <code>export_name</code> identifier the name of the export in that module <code>kind</code> external kind the kind of import <p>Instantiating a Module requires the embedding to bind items of the correct type to each import, which is called parametric linking.</p> <p>Functionally, imports take an externally-defined item and bring it into the corresponding index space for that items type.</p>"},{"location":"module/import/#import-types","title":"Import Types","text":"<ul> <li>Function<ul> <li>A function import specifies the signature type for the function.</li> <li>The function supplied for an import must have the specified type.</li> </ul> </li> <li>Table<ul> <li>The table supplied for an import can't have a smaller minimum than requested by the module.</li> <li>If a table import has a specified maximum, the supplied table must have an import and it must be at least as large.</li> </ul> </li> <li>Memory<ul> <li>The memory supplied for an import can't have a smaller minimum than requested by the module.</li> <li>If a memory import has a specified maximum, the supplied memory must have an import and it must be at least as large.</li> </ul> </li> <li>Global<ul> <li>Imported globals must be immutible.</li> </ul> </li> </ul>"},{"location":"module/import/#import-binding","title":"Import Binding","text":"<p>When a Module is instantiated, its imports can be satisfied by either the Host or another Guest Module.</p>"},{"location":"module/instructions/","title":"Instructions (Module)","text":""},{"location":"module/instructions/#arithmetic","title":"Arithmetic","text":""},{"location":"module/instructions/#memory","title":"Memory","text":""},{"location":"module/memory/","title":"Memory (Module)","text":"<p>Wasm Modules can access \"linear memories\" that they define or import.</p> <p>This is done through memory instructions which are able to</p> <ul> <li>Determine the size of the memory in pages,</li> <li>Attempt to grow the memory by some amount,</li> <li>and load from or store into the memory.</li> </ul> <p>Memories are defined with a minimum number of pages they need and optionally a maximum number of pages they will ever need.</p>"},{"location":"module/memory/#exporting-memory","title":"Exporting Memory","text":"<p>Memories can also be exported which assigns them an external name.</p> <p>Modules can be linked together so that module A's export is connected to module B's import. This enables two modules to share a memory.</p> <p>Alternatively, the memory can be exported and used by the host.</p>"},{"location":"module/table/","title":"Table (Module)","text":"<p>TODO</p>"},{"location":"module/value/","title":"Value (Module)","text":"<p>Wasm Modules operate on primitive values (e.g. 32-bit integers) which Functions and Instructions take in and return.</p> <p>These values can exist on the stack, in locals and globals, and be loaded and stored from linear memory. Wasm doesn't have values that are smaller than 32 bits, but you are able to perform 8 and 16 bit loads and stores.</p> <p>The main kinds of types are</p> <ul> <li>Integers</li> <li>Floating Point Numbers</li> </ul>"},{"location":"module/value/#integers","title":"Integers","text":"<p>Wasm has three kinds of integer types that correspond to the name prefix.</p> <ul> <li><code>i</code> - An integer that can be either signed or unsigned</li> <li><code>u</code> - An unsigned integer</li> <li><code>s</code> - A signed integer</li> </ul> <p>For each of these kinds of integers there are 32 and 64 bit variants.</p> Name Description <code>i32</code> A 32-bit integer that has unknown signedness <code>u32</code> An unsigned 32-bit integer <code>s32</code> A signed 32-bit integer <code>i64</code> A 64-bit integer that has unknown signedness <code>u64</code> An unsigned 64-bit integer <code>s64</code> A signed 64-bit integer"},{"location":"module/value/#floating-point-numbers","title":"Floating Point Numbers","text":"<p>Wasm has 32 and 64 bit floating point numbers.</p> Name Description <code>f32</code> A 32-bit floating point number <code>f64</code> A 64-bit floating point number"}]}